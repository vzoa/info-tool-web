@page "/charts/{airportId?}"
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Options
@using ZoaReference.Features.Charts.Models
@using ZoaReference.Features.Charts.Services
@rendermode InteractiveServer

@inject AviationApiChartService AviationApiChartService
@inject IOptionsMonitor<AppSettings> AppSettings
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IJSRuntime Js

<PageTitle>Charts - ZOA Reference</PageTitle>

<SectionContent SectionName="sub-nav">
    <div class="bg-slate-900 flex items-center gap-2 px-2 py-0.5 flex-wrap">
        @foreach (var airport in _airports)
        {
            @if (airport.Type == AirportType.Other)
            {
                <div class="relative mr-2">
                    <button class="@MakeAirportButtonClass(airport)" @onclick="() => UpdateCharts(airport.Id)">
                        @FormatAirportId(airport)
                    </button>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                         class="stroke-gray-100 w-4 h-4 absolute top-1 -right-4 hover:stroke-red-500 transition-colors hover:cursor-pointer"
                         @onclick="args => RemoveAirport(airport, args)">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </div>
            }
            else
            {
                <button class="@MakeAirportButtonClass(airport)" @onclick="() => UpdateCharts(airport.Id)">
                    @FormatAirportId(airport)
                </button>
            }
        }
        <button @onclick="ShowAirportInput">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                <path
                    d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"/>
            </svg>
        </button>

        @if (_airportInputShown)
        {
            <EditForm Model="@_airportForm" OnValidSubmit="@AirportSubmit">
                <DataAnnotationsValidator/>
                <InputText @ref="_airportInputReference" @bind-Value="_airportForm.AirportId" id="airportInput"
                           class="uppercase bg-transparent border border-gray-500 focus:outline-none focus:bg-gray-700 p-0.5 w-24"
                           placeholder="FAA/ICAO"/>
                <ValidationMessage For="() => _airportForm.AirportId"/>
            </EditForm>
        }
    </div>
</SectionContent>

<div class="flex grow">
    <div class="w-1/3">
        <div class=@("flex items-center mb-2 ml-1" + (string.IsNullOrEmpty(_airportId) ? " collapse" : ""))>
            <input @ref="@_filterInput" id="filterInput"
                   class="bg-transparent border border-gray-500 focus:outline-none focus:bg-gray-700 p-0.5 w-40"
                   type="text" @bind="_filterInputText" @bind:event="oninput" placeholder="Filter"
                   autocomplete="off"/>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                 class="stroke-gray-100 w-4 h-4 hover:stroke-red-500 transition-colors hover:cursor-pointer ml-1"
                 @onclick="async () => await ClearFilterInput()">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </div>

        <div class="flex flex-col justify-start items-start gap-y-4">
            @foreach (var charts in new List<List<Chart>> { FilteredCharts.Info, FilteredCharts.Sid, FilteredCharts.Star })
            {
                @if (charts.Any())
                {
                    <div class="flex flex-wrap justify-start items-start">
                        @foreach (var chart in charts)
                        {
                            <button class="@MakeChartButtonClass(chart)"
                                    @onclick="() => UpdateDisplayedChart(chart)">@chart.ChartName</button>
                        }
                    </div>
                }
            }

            @foreach (var runwayGroup in FilteredCharts.Approach.Keys.Order())
            {
                <div class="flex flex-wrap justify-start items-start">
                    @foreach (var chart in FilteredCharts.Approach[runwayGroup])
                    {
                        <button class="@MakeChartButtonClass(chart)"
                                @onclick="() => UpdateDisplayedChart(chart)">@chart.ChartName</button>
                    }
                </div>
            }
        </div>
    </div>
    <div class="w-2/3">
        @if (_displayedChart is not null)
        {
            <div class="h-full flex flex-col">
                @if (_displayedChart.Pages.Count > 1)
                {
                    <div class="flex gap-2 items-center text-xs mb-3">
                        @foreach (var chartPage in _displayedChart.Pages.OrderBy(p => p.PageNumber))
                        {
                            <button class="@MakePageButtonClass(chartPage)"
                                    @onclick="() => UpdateDisplayedChartPage(chartPage)">@($"Pg. {chartPage.PageNumber}")</button>
                        }
                    </div>
                }
                <object class="pt-1 w-full grow" type="application/pdf" data="@_displayedChartPage?.PdfPath"></object>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string? AirportId { get; set; }
    private string _airportId = "";

    private Chart? _displayedChart;
    private ChartPage? _displayedChartPage;

    private OrganizedCharts _organizedCharts = new() { Info = [], Sid = [], Star = [], Approach = [] };
    private readonly List<Airport> _airports = [];

    private bool _airportInputShown;
    private readonly AirportForm _airportForm = new();
    private InputText? _airportInputReference;

    private class AirportForm
    {
        [Required]
        [StringLength(4, ErrorMessage = "ID cannot exceed 4 characters.")]
        public string AirportId { get; set; }
    }

    private const string CustomAirportsSessionStorageKey = "customAirports";
    private const string ChartStateSessionStorageKey = "chartState";

    private ElementReference _filterInput;
    private string _filterInputText = "";

    private OrganizedCharts FilteredCharts => new()
    {
        Info = _organizedCharts.Info.Where(c => ChartContainsText(c, _filterInputText)).ToList(),
        Sid = _organizedCharts.Sid.Where(c => ChartContainsText(c, _filterInputText)).ToList(),
        Star = _organizedCharts.Star.Where(c => ChartContainsText(c, _filterInputText)).ToList(),
        Approach = _organizedCharts.Approach.Where(kv => kv.Value.Any(c => ChartContainsText(c, _filterInputText))).ToDictionary(k => k.Key, v => v.Value.Where(c => ChartContainsText(c, _filterInputText)).ToList())
    };

    private static bool ChartContainsText(Chart c, string s)
    {
        return c.ChartName.Contains(s, StringComparison.OrdinalIgnoreCase);
    }

    private void ShowAirportInput()
    {
        if (_airportInputShown) return;
        _airportInputShown = true;
    }

    private async Task AirportSubmit()
    {
        var newAirport = new Airport(_airportForm.AirportId.ToUpper(), AirportType.Other, Guid.NewGuid());
        _airports.Add(newAirport);
        _airportInputShown = false;
        _airportForm.AirportId = "";

        await UpdateCharts(newAirport.Id);

        var savedCustomAirportsTask = await ProtectedLocalStore.GetAsync<List<SavedAirport>>(CustomAirportsSessionStorageKey);
        if (savedCustomAirportsTask is { Success: true, Value: not null })
        {
            savedCustomAirportsTask.Value.Add(new SavedAirport(newAirport.Id, newAirport.Guid));
            await ProtectedLocalStore.SetAsync(CustomAirportsSessionStorageKey, savedCustomAirportsTask.Value);
        }
        else
        {
            await ProtectedLocalStore.SetAsync(CustomAirportsSessionStorageKey, new List<SavedAirport> { new(newAirport.Id, newAirport.Guid) });
        }
    }

    private async Task RemoveAirport(Airport airport, MouseEventArgs args)
    {
        if (args.CtrlKey)
        {
            var currentAirportIsCustom = _airports.Any(a => a.Id == _airportId);
            _airports.RemoveAll(a => a.Type == AirportType.Other);
            if (currentAirportIsCustom)
            {
                _displayedChart = null;
                _displayedChartPage = null;
                _organizedCharts = new OrganizedCharts { Info = [], Sid = [], Star = [], Approach = [] };
            }

            var savedCustomAirportsTask = await ProtectedLocalStore.GetAsync<List<SavedAirport>>(CustomAirportsSessionStorageKey);
            if (savedCustomAirportsTask is { Success: true, Value: not null })
            {
                _airports.RemoveAll(a => a.Type == AirportType.Other);
                await ProtectedLocalStore.SetAsync(CustomAirportsSessionStorageKey, savedCustomAirportsTask.Value);
            }
        }
        else
        {
            _airports.RemoveAll(a => a.Guid == airport.Guid);
            if (airport.Id == _airportId)
            {
                _displayedChart = null;
                _displayedChartPage = null;
                _organizedCharts = new OrganizedCharts { Info = [], Sid = [], Star = [], Approach = [] };
            }

            var savedCustomAirportsTask = await ProtectedLocalStore.GetAsync<List<SavedAirport>>(CustomAirportsSessionStorageKey);
            if (savedCustomAirportsTask is { Success: true, Value: not null })
            {
                savedCustomAirportsTask.Value.RemoveAll(a => a.Guid == airport.Guid);
                await ProtectedLocalStore.SetAsync(CustomAirportsSessionStorageKey, savedCustomAirportsTask.Value);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _airportId = AirportId ?? string.Empty;
        if (!string.IsNullOrEmpty(_airportId))
        {
            await UpdateCharts(_airportId);
        }

        foreach (var airport in AppSettings.CurrentValue.ArtccAirports.Bravos)
        {
            _airports.Add(new Airport(airport, AirportType.Bravo, Guid.NewGuid()));
        }

        foreach (var airport in AppSettings.CurrentValue.ArtccAirports.Charlies)
        {
            _airports.Add(new Airport(airport, AirportType.Charlie, Guid.NewGuid()));
        }

        foreach (var airport in AppSettings.CurrentValue.ArtccAirports.Deltas)
        {
            _airports.Add(new Airport(airport, AirportType.Delta, Guid.NewGuid()));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var stateUpdated = false;

        if (firstRender && AirportId is null)
        {
            var savedStateTask = await ProtectedLocalStore.GetAsync<ChartState>(ChartStateSessionStorageKey);
            if (savedStateTask is { Success: true, Value: not null })
            {
                await UpdateCharts(savedStateTask.Value.AirportId);
                _displayedChart = savedStateTask.Value.Chart;
                _displayedChartPage = savedStateTask.Value.Page;
                stateUpdated = true;
            }
        }

        if (firstRender)
        {
            var savedCustomAirportsTask = await ProtectedLocalStore.GetAsync<List<SavedAirport>>(CustomAirportsSessionStorageKey);
            if (savedCustomAirportsTask is { Success: true, Value: not null })
            {
                var customAirports = savedCustomAirportsTask.Value.Select(a => new Airport(a.Id, AirportType.Other, a.Guid));
                _airports.AddRange(customAirports);
                stateUpdated = true;
            }
        }

        if (_airportInputShown && _airportInputReference?.Element is not null)
        {
            await _airportInputReference.Element.Value.FocusAsync();
        }

        if (stateUpdated)
        {
            StateHasChanged();
        }
    }

    private async Task UpdateCharts(string id)
    {
        _airportId = id;
        var charts = await AviationApiChartService.GetChartsForId(id);
        _organizedCharts = OrganizeCharts(charts);
        await ClearFilterInput();
    }

    private async Task UpdateDisplayedChart(Chart? chart)
    {
        if (chart is null) return;
        _displayedChart = chart;
        await UpdateDisplayedChartPage(chart.Pages.OrderBy(p => p.PageNumber).First());
    }

    private async Task UpdateDisplayedChartPage(ChartPage page)
    {
        _displayedChartPage = page;
        await ProtectedLocalStore.SetAsync(ChartStateSessionStorageKey, new ChartState(_airportId, _displayedChart, _displayedChartPage));
    }

    private async Task ClearFilterInput(bool setFocus = true)
    {
        _filterInputText = "";
        if (setFocus)
        {
            await Js.InvokeVoidAsync("SetFocusToId", "filterInput");
        }
    }


    private string MakeChartButtonClass(Chart chart)
    {
        const string baseClass = "border p-1 m-1 cursor-pointer text-xs w-32 h-12";
        var borderColor = chart.ChartCode switch
        {
            "APD" => "border-green-500",
            "MIN" => "border-orange-500",
            "LAH" => "border-yellow-500",
            "HOT" => "border-red-500",
            "STAR" => "border-sky-500",
            "IAP" => "border-violet-500",
            "DP" => "border-pink-500",
            _ => "border-gray-600"
        };
        var isSelected = _displayedChart?.ChartName == chart.ChartName && _displayedChart?.AirportName == chart.AirportName ? "bg-white text-black font-bold" : "hover:bg-gray-700 ";

        return string.Join(" ", baseClass, borderColor, isSelected);
    }

    private string MakePageButtonClass(ChartPage page)
    {
        const string baseClass = "hover:bg-gray-700 border border-gray-600 p-1 m-1 cursor-pointer";
        var isSelected = page.PdfPath == _displayedChartPage?.PdfPath ? "bg-gray-700 font-bold" : "";
        return string.Join(" ", baseClass, isSelected);
    }

    private enum AirportType
    {
        Bravo,
        Charlie,
        Delta,
        Other
    }

    private record struct Airport(string Id, AirportType Type, Guid Guid);

    private string MakeAirportButtonClass(Airport airport)
    {
        const string baseClass = "p-1";
        var textColor = airport.Type switch
        {
            AirportType.Bravo => "text-orange-500",
            AirportType.Charlie => "text-sky-400",
            AirportType.Delta => "text-gray-300",
            _ => "text-red-300"
        };
        var isSelected = airport.Id == _airportId ? "underline decoration-2 underline-offset-4 bg-gray-700" : "";
        return string.Join(" ", baseClass, textColor, isSelected);
    }

    private class ChartState(string airportId, Chart? chart, ChartPage? page)
    {
        public string AirportId { get; } = airportId;
        public Chart? Chart { get; } = chart;
        public ChartPage? Page { get; } = page;
    }

    private static int GetRankOrder(Chart chart)
    {
        return chart.ChartCode switch
        {
            "APD" => 0,
            "MIN" => 1,
            "LAH" => 2,
            "HOT" => 3,
            "STAR" => 4,
            "IAP" => 5,
            "DP" => 6,
            _ => 7
        };
    }

    private static string GetGroupKey(Chart chart)
    {
        return chart.ChartCode switch
        {
            "APD" => "info",
            "MIN" => "info",
            "LAH" => "info",
            "HOT" => "info",
            "STAR" => "star",
            "IAP" => "approach",
            "DP" => "sid",
            "ODP" => "sid",
            _ => "info"
        };
    }

    private static string GetRunway(Chart chart)
    {
        const string runwayRegex = @"RWY [0-3][0-9][LRC]?(?:/[LRC])?(?:/[LRC])?";
        var match = Regex.Match(chart.ChartName, runwayRegex);
        return match.Success ? match.Groups[0].Value : "";
    }

    public record struct OrganizedCharts(List<Chart> Info, List<Chart> Star, List<Chart> Sid, Dictionary<string, List<Chart>> Approach);

    private static OrganizedCharts OrganizeCharts(IEnumerable<Chart> charts)
    {
        var grouped = charts.GroupBy(GetGroupKey).ToDictionary(group => group.Key, group => group.ToList());
        var info = grouped.TryGetValue("info", out var infoVals) ? infoVals.OrderBy(GetRankOrder).ToList() : [];
        var star = grouped.TryGetValue("star", out var starVals) ? starVals : [];
        var sid = grouped.TryGetValue("sid", out var sidVals) ? sidVals.OrderBy(GetRankOrder).ToList() : [];
        var approach = grouped.TryGetValue("approach", out var approachVals) ? approachVals : [];
        var approachGrouped = approach.GroupBy(GetRunway).ToDictionary(group => group.Key, group => group.ToList());
        return new OrganizedCharts(info, star, sid, approachGrouped);
    }

    private static string FormatAirportId(Airport airport)
    {
        return airport.Id.Length == 4 && airport.Id.ToUpper().StartsWith("K") ? airport.Id[1..] : airport.Id;
    }

    private record struct SavedAirport(string Id, Guid Guid);

}